# QEF ChatBot Nginx 反向代理配置详解
# 位置: /etc/nginx/sites-available/qef-chatbot

# 定义上游服务器（后端 Next.js 应用）
upstream qef_backend {
    # 后端 Next.js 应用地址
    server 127.0.0.1:3000;
    
    # 保持连接池，提高性能
    keepalive 32;
}

# 主服务器配置
server {
    # 监听端口
    listen 80;
    listen [::]:80;  # IPv6 支持
    
    # 服务器域名（请替换为您的实际域名）
    server_name your-domain.com www.your-domain.com;
    
    # 字符集
    charset utf-8;
    
    # 日志配置
    access_log /var/log/nginx/qef-chatbot-access.log;
    error_log /var/log/nginx/qef-chatbot-error.log;
    
    # 文件上传大小限制（用于图片上传等）
    client_max_body_size 50M;
    
    # 增加超時設置
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    client_header_timeout 300s;
    client_body_timeout 300s;
    
    # ============================================
    # Gzip 压缩配置（减少传输大小）
    # ============================================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/x-font-ttf
        font/opentype;
    
    # ============================================
    # 静态文件处理（直接由 Nginx 提供，提高性能）
    # ============================================
    
    # Next.js 构建的静态文件
    location /_next/static/ {
        alias /var/www/qef-chatbot/.next/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        
        # 支持预压缩文件
        location ~* \.(js|css)$ {
            gzip_static on;
            expires 1y;
        }
    }
    
    # 项目静态资源
    location /assets/ {
        alias /var/www/qef-chatbot/assets/;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    
    # 公共静态文件（图标、字体等）
    location ~* \.(ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|webp)$ {
        root /var/www/qef-chatbot/public;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
    }
    
    # ============================================
    # API 路由特殊处理
    # ============================================
    location /api/ {
        # 代理到后端应用
        proxy_pass http://qef_backend;
        
        # HTTP 版本和连接设置
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 传递原始请求信息
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # 缓存绕过设置
        proxy_cache_bypass $http_upgrade;
        
        # API 专用超时设置（AI 响应可能较慢）
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;    # 5分钟
        proxy_read_timeout 300s;    # 5分钟
        
        # 禁用缓存（API 响应应该是实时的）
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # 禁用缓冲（实时流式响应）
        proxy_buffering off;
        proxy_request_buffering off;
        
        # 设置合适的缓冲区大小
        proxy_buffer_size 4k;
    }
    
    # ============================================
    # 主应用反向代理
    # ============================================
    location / {
        # 代理到后端应用
        proxy_pass http://qef_backend;
        
        # HTTP 版本和连接设置
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 传递原始请求信息
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        
        # 缓存绕过设置
        proxy_cache_bypass $http_upgrade;
        
        # 标准超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 启用缓冲（提高性能）
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # 连接复用优化
        proxy_set_header Connection "";
        
        # 重试配置
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 3s;
    }
    
    # ============================================
    # 健康检查端点
    # ============================================
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Nginx 状态页面（可选，用于监控）
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    # ============================================
    # 安全头配置
    # ============================================
    # 防止点击劫持
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # XSS 保护
    add_header X-XSS-Protection "1; mode=block" always;
    
    # 防止 MIME 类型嗅探
    add_header X-Content-Type-Options "nosniff" always;
    
    # 引用策略
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # 内容安全策略（根据您的应用需求调整）
    add_header Content-Security-Policy "
        default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval';
        connect-src 'self' https://aai03.eduhk.hk https://*.clerk.dev https://*.clerk.com wss://*.clerk.dev wss://*.clerk.com;
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.clerk.dev https://*.clerk.com;
        style-src 'self' 'unsafe-inline' https://*.clerk.dev https://*.clerk.com;
        img-src 'self' data: https: blob:;
        font-src 'self' data: https:;
        worker-src 'self' blob:;
    " always;
    
    # ============================================
    # 错误页面配置
    # ============================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/html;
        internal;
    }
    
    location = /50x.html {
        root /var/www/html;
        internal;
    }
    
    # ============================================
    # 禁止访问敏感文件
    # ============================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(env|log|htaccess|gitignore)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# ============================================
# WWW 重定向配置（可选）
# ============================================
server {
    listen 80;
    listen [::]:80;
    server_name www.your-domain.com;
    return 301 http://your-domain.com$request_uri;
}

# ============================================
# HTTPS 配置模板（SSL 证书安装后启用）
# ============================================
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name your-domain.com;
#     
#     # SSL 证书配置
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     
#     # SSL 安全配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_session_tickets off;
#     
#     # OCSP Stapling
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#     
#     # 其他配置与 HTTP 版本相同...
#     # （复制上面的 location 块和其他配置）
# }
# 
# # HTTPS 重定向
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com www.your-domain.com;
#     return 301 https://your-domain.com$request_uri;
# }
